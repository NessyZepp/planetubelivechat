import 'multer';
import { UploadFilesForCheck } from 'express';
declare function exists(value: any): boolean;
declare function isSafePath(p: string): boolean;
declare function isSafeFilename(filename: string, extension?: string): boolean;
declare function isSafePeerTubeFilenameWithoutExtension(filename: string): RegExpMatchArray;
declare function isArray(value: any): value is any[];
declare function isNotEmptyIntArray(value: any): boolean;
declare function isNotEmptyStringArray(value: any): boolean;
declare function isArrayOf(value: any, validator: (value: any) => boolean): boolean;
declare function isDateValid(value: string): boolean;
declare function isIdValid(value: string): boolean;
declare function isUUIDValid(value: string): boolean;
declare function areUUIDsValid(values: string[]): boolean;
declare function isIdOrUUIDValid(value: string): boolean;
declare function isBooleanValid(value: any): boolean;
declare function isIntOrNull(value: any): boolean;
declare function isFileValid(options: {
    files: UploadFilesForCheck;
    maxSize: number | null;
    mimeTypeRegex: string | null;
    field?: string;
    optional?: boolean;
}): boolean;
declare function checkMimetypeRegex(fileMimeType: string, mimeTypeRegex: string): boolean;
declare function toCompleteUUID(value: string): string;
declare function toCompleteUUIDs(values: string[]): string[];
declare function toIntOrNull(value: string): string | number;
declare function toBooleanOrNull(value: any): string | boolean;
declare function toValueOrNull(value: string): string;
declare function toIntArray(value: any): any;
export { exists, isArrayOf, isNotEmptyIntArray, isArray, isIntOrNull, isIdValid, isSafePath, isNotEmptyStringArray, isUUIDValid, toCompleteUUIDs, toCompleteUUID, isIdOrUUIDValid, isDateValid, toValueOrNull, toBooleanOrNull, isBooleanValid, toIntOrNull, areUUIDsValid, toIntArray, isFileValid, isSafePeerTubeFilenameWithoutExtension, isSafeFilename, checkMimetypeRegex };
//# sourceMappingURL=misc.d.ts.map