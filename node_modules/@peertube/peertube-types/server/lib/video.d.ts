import { UploadFiles } from 'express';
import memoizee from 'memoizee';
import { Transaction } from 'sequelize/types';
import { VideoModel } from '../models/video/video';
import { FilteredModelAttributes } from '../types';
import { MThumbnail, MVideoFullLight, MVideoTag, MVideoThumbnail, MVideoUUID } from '../types/models';
import { ThumbnailType, VideoCreate, VideoPrivacy, VideoState } from '../../shared/models';
declare function buildLocalVideoFromReq(videoInfo: VideoCreate, channelId: number): FilteredModelAttributes<VideoModel>;
declare function buildVideoThumbnailsFromReq(options: {
    video: MVideoThumbnail;
    files: UploadFiles;
    fallback: (type: ThumbnailType) => Promise<MThumbnail>;
    automaticallyGenerated?: boolean;
}): Promise<MThumbnail[]>;
declare function setVideoTags(options: {
    video: MVideoTag;
    tags: string[];
    transaction?: Transaction;
}): Promise<void>;
declare function buildMoveToObjectStorageJob(options: {
    video: MVideoUUID;
    previousVideoState: VideoState;
    isNewVideo?: boolean;
}): Promise<{
    type: "move-to-object-storage";
    payload: {
        videoUUID: string;
        isNewVideo: boolean;
        previousVideoState: VideoState;
    };
}>;
declare function getVideoDuration(videoId: number | string): Promise<{
    duration: number;
    isLive: boolean;
}>;
declare const getCachedVideoDuration: typeof getVideoDuration & memoizee.Memoized<typeof getVideoDuration>;
declare function addVideoJobsAfterUpdate(options: {
    video: MVideoFullLight;
    isNewVideo: boolean;
    nameChanged: boolean;
    oldPrivacy: VideoPrivacy;
}): Promise<import("bullmq").JobNode>;
export { buildLocalVideoFromReq, buildVideoThumbnailsFromReq, setVideoTags, buildMoveToObjectStorageJob, addVideoJobsAfterUpdate, getCachedVideoDuration };
//# sourceMappingURL=video.d.ts.map