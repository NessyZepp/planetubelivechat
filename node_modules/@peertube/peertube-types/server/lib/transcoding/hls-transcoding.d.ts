import { MutexInterface } from 'async-mutex';
import { Job } from 'bullmq';
import { MVideo, MVideoFile } from '../../types/models';
import { VideoResolution } from '../../../shared/models';
import { VideoFileModel } from '../../models/video/video-file';
export declare function generateHlsPlaylistResolutionFromTS(options: {
    video: MVideo;
    concatenatedTsFilePath: string;
    resolution: VideoResolution;
    fps: number;
    isAAC: boolean;
    inputFileMutexReleaser: MutexInterface.Releaser;
}): Promise<void>;
export declare function generateHlsPlaylistResolution(options: {
    video: MVideo;
    videoInputPath: string;
    resolution: VideoResolution;
    fps: number;
    copyCodecs: boolean;
    inputFileMutexReleaser: MutexInterface.Releaser;
    job?: Job;
}): Promise<void>;
export declare function onHLSVideoFileTranscoding(options: {
    video: MVideo;
    videoFile: MVideoFile;
    videoOutputPath: string;
    m3u8OutputPath: string;
}): Promise<{
    resolutionPlaylistPath: string;
    videoFile: VideoFileModel;
}>;
//# sourceMappingURL=hls-transcoding.d.ts.map