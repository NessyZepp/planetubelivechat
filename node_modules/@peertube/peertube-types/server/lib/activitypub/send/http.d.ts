import { MActor } from '../../../types/models';
import { ContextType } from '../../../../shared/models/activitypub/context';
type Payload<T> = {
    body: T;
    contextType: ContextType;
    signatureActorId?: number;
};
declare function computeBody<T>(payload: Payload<T>): Promise<T | T & {
    type: 'RsaSignature2017';
    creator: string;
    created: string;
}>;
declare function buildSignedRequestOptions(payload: Payload<any>): Promise<{
    algorithm: string;
    authorizationHeaderName: string;
    keyId: string;
    key: string;
    headers: string[];
}>;
declare function buildGlobalHeaders(body: any): {
    digest: string;
    'content-type': string;
    accept: string;
};
declare function signAndContextify<T>(byActor: MActor, data: T, contextType: ContextType | null): Promise<T & {
    signature: {
        type: string;
        creator: string;
        created: string;
    };
}>;
export { buildGlobalHeaders, computeBody, buildSignedRequestOptions, signAndContextify };
//# sourceMappingURL=http.d.ts.map