import { MAbuseFull, MAbuseId, MActor, MActorFollow, MActorId, MActorUrl, MCommentId, MLocalVideoViewer, MVideoId, MVideoPlaylistElement, MVideoUrl, MVideoUUID, MVideoWithHost } from '../../types/models';
import { MVideoFileVideoUUID } from '../../types/models/video/video-file';
import { MVideoPlaylist, MVideoPlaylistUUID } from '../../types/models/video/video-playlist';
import { MStreamingPlaylist } from '../../types/models/video/video-streaming-playlist';
declare function getLocalVideoActivityPubUrl(video: MVideoUUID): string;
declare function getLocalVideoPlaylistActivityPubUrl(videoPlaylist: MVideoPlaylist): string;
declare function getLocalVideoPlaylistElementActivityPubUrl(videoPlaylist: MVideoPlaylistUUID, videoPlaylistElement: MVideoPlaylistElement): string;
declare function getLocalVideoCacheFileActivityPubUrl(videoFile: MVideoFileVideoUUID): string;
declare function getLocalVideoCacheStreamingPlaylistActivityPubUrl(video: MVideoUUID, playlist: MStreamingPlaylist): string;
declare function getLocalVideoCommentActivityPubUrl(video: MVideoUUID, videoComment: MCommentId): string;
declare function getLocalVideoChannelActivityPubUrl(videoChannelName: string): string;
declare function getLocalAccountActivityPubUrl(accountName: string): string;
declare function getLocalAbuseActivityPubUrl(abuse: MAbuseId): string;
declare function getLocalVideoViewActivityPubUrl(byActor: MActorUrl, video: MVideoId, viewerIdentifier: string): string;
declare function getLocalVideoViewerActivityPubUrl(stats: MLocalVideoViewer): string;
declare function getVideoLikeActivityPubUrlByLocalActor(byActor: MActorUrl, video: MVideoId): string;
declare function getVideoDislikeActivityPubUrlByLocalActor(byActor: MActorUrl, video: MVideoId): string;
declare function getLocalVideoSharesActivityPubUrl(video: MVideoUrl): string;
declare function getLocalVideoCommentsActivityPubUrl(video: MVideoUrl): string;
declare function getLocalVideoLikesActivityPubUrl(video: MVideoUrl): string;
declare function getLocalVideoDislikesActivityPubUrl(video: MVideoUrl): string;
declare function getLocalActorFollowActivityPubUrl(follower: MActor, following: MActorId): string;
declare function getLocalActorFollowAcceptActivityPubUrl(actorFollow: MActorFollow): string;
declare function getLocalActorFollowRejectActivityPubUrl(): string;
declare function getLocalVideoAnnounceActivityPubUrl(byActor: MActorId, video: MVideoUrl): string;
declare function getDeleteActivityPubUrl(originalUrl: string): string;
declare function getUpdateActivityPubUrl(originalUrl: string, updatedAt: string): string;
declare function getUndoActivityPubUrl(originalUrl: string): string;
declare function getAbuseTargetUrl(abuse: MAbuseFull): string;
declare function buildRemoteVideoBaseUrl(video: MVideoWithHost, path: string, scheme?: string): string;
declare function checkUrlsSameHost(url1: string, url2: string): boolean;
export { getLocalVideoActivityPubUrl, getLocalVideoPlaylistActivityPubUrl, getLocalVideoPlaylistElementActivityPubUrl, getLocalVideoCacheFileActivityPubUrl, getLocalVideoCacheStreamingPlaylistActivityPubUrl, getLocalVideoCommentActivityPubUrl, getLocalVideoChannelActivityPubUrl, getLocalAccountActivityPubUrl, getLocalAbuseActivityPubUrl, getLocalActorFollowActivityPubUrl, getLocalActorFollowAcceptActivityPubUrl, getLocalVideoAnnounceActivityPubUrl, getUpdateActivityPubUrl, getUndoActivityPubUrl, getVideoLikeActivityPubUrlByLocalActor, getLocalVideoViewActivityPubUrl, getVideoDislikeActivityPubUrlByLocalActor, getLocalActorFollowRejectActivityPubUrl, getDeleteActivityPubUrl, getLocalVideoSharesActivityPubUrl, getLocalVideoCommentsActivityPubUrl, getLocalVideoLikesActivityPubUrl, getLocalVideoDislikesActivityPubUrl, getLocalVideoViewerActivityPubUrl, getAbuseTargetUrl, checkUrlsSameHost, buildRemoteVideoBaseUrl };
//# sourceMappingURL=url.d.ts.map