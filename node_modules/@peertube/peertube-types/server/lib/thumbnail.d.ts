import { ThumbnailType } from '../../shared/models';
import { MVideoFile, MVideoThumbnail } from '../types/models';
import { MThumbnail } from '../types/models/video/thumbnail';
import { MVideoPlaylistThumbnail } from '../types/models/video/video-playlist';
type ImageSize = {
    height?: number;
    width?: number;
};
declare function updatePlaylistMiniatureFromExisting(options: {
    inputPath: string;
    playlist: MVideoPlaylistThumbnail;
    automaticallyGenerated: boolean;
    keepOriginal?: boolean;
    size?: ImageSize;
}): Promise<MThumbnail>;
declare function updatePlaylistMiniatureFromUrl(options: {
    downloadUrl: string;
    playlist: MVideoPlaylistThumbnail;
    size?: ImageSize;
}): Promise<MThumbnail>;
declare function updateVideoMiniatureFromUrl(options: {
    downloadUrl: string;
    video: MVideoThumbnail;
    type: ThumbnailType;
    size?: ImageSize;
}): Promise<MThumbnail>;
declare function updateVideoMiniatureFromExisting(options: {
    inputPath: string;
    video: MVideoThumbnail;
    type: ThumbnailType;
    automaticallyGenerated: boolean;
    size?: ImageSize;
    keepOriginal?: boolean;
}): Promise<MThumbnail>;
declare function generateVideoMiniature(options: {
    video: MVideoThumbnail;
    videoFile: MVideoFile;
    type: ThumbnailType;
}): Promise<MThumbnail>;
declare function updatePlaceholderThumbnail(options: {
    fileUrl: string;
    video: MVideoThumbnail;
    type: ThumbnailType;
    size: ImageSize;
}): MThumbnail;
export { generateVideoMiniature, updateVideoMiniatureFromUrl, updateVideoMiniatureFromExisting, updatePlaceholderThumbnail, updatePlaylistMiniatureFromUrl, updatePlaylistMiniatureFromExisting };
//# sourceMappingURL=thumbnail.d.ts.map