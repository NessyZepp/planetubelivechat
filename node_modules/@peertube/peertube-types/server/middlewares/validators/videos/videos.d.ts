import express from 'express';
import { ValidationChain } from 'express-validator';
import { ExpressPromiseHandler } from '../../../types/express-handler';
declare const videosAddLegacyValidator: (ValidationChain | ExpressPromiseHandler)[];
/**
 * Gets called after the last PUT request
 */
declare const videosAddResumableValidator: ((req: express.Request, res: express.Response, next: express.NextFunction) => Promise<void | express.Response<any>>)[];
/**
 * File is created in POST initialisation, and its body is saved as a 'metadata' field is saved by uploadx for later use.
 * see https://github.com/kukhariev/node-uploadx/blob/dc9fb4a8ac5a6f481902588e93062f591ec6ef03/packages/core/src/handlers/uploadx.ts
 *
 * Uploadx doesn't use next() until the upload completes, so this middleware has to be placed before uploadx
 * see https://github.com/kukhariev/node-uploadx/blob/dc9fb4a8ac5a6f481902588e93062f591ec6ef03/packages/core/src/handlers/base-handler.ts
 *
 */
declare const videosAddResumableInitValidator: (ValidationChain | ExpressPromiseHandler)[];
declare const videosUpdateValidator: (ValidationChain | ExpressPromiseHandler)[];
declare function checkVideoFollowConstraints(req: express.Request, res: express.Response, next: express.NextFunction): Promise<void>;
declare const videosCustomGetValidator: (fetchType: 'for-api' | 'all' | 'only-video' | 'only-immutable-attributes') => (ValidationChain | ((req: express.Request, res: express.Response, next: express.NextFunction) => Promise<void>))[];
declare const videosGetValidator: (ValidationChain | ((req: express.Request, res: express.Response, next: express.NextFunction) => Promise<void>))[];
declare const videoFileMetadataGetValidator: (ValidationChain | ExpressPromiseHandler)[];
declare const videosDownloadValidator: (ValidationChain | ((req: express.Request, res: express.Response, next: express.NextFunction) => Promise<void>))[];
declare const videosRemoveValidator: (ValidationChain | ((req: express.Request, res: express.Response, next: express.NextFunction) => Promise<void>))[];
declare const videosOverviewValidator: (ValidationChain | ((req: express.Request, res: express.Response, next: express.NextFunction) => void))[];
declare function getCommonVideoEditAttributes(): (ValidationChain | ExpressPromiseHandler)[];
declare const commonVideosFiltersValidator: (ValidationChain | ((req: express.Request, res: express.Response, next: express.NextFunction) => false | void))[];
export { videosAddLegacyValidator, videosAddResumableValidator, videosAddResumableInitValidator, videosUpdateValidator, videosGetValidator, videoFileMetadataGetValidator, videosDownloadValidator, checkVideoFollowConstraints, videosCustomGetValidator, videosRemoveValidator, getCommonVideoEditAttributes, commonVideosFiltersValidator, videosOverviewValidator };
export declare function isVideoAccepted(req: express.Request, res: express.Response, videoFile: express.VideoUploadFile): Promise<boolean>;
//# sourceMappingURL=videos.d.ts.map