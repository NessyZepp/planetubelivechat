import { Model } from 'sequelize-typescript';
import { MRegistration, MRegistrationFormattable } from '../../types/models';
import { UserRegistration, UserRegistrationState } from '../../../shared/models';
import { AttributesOnly } from '../../../shared/typescript-utils';
import { UserModel } from './user';
export declare class UserRegistrationModel extends Model<Partial<AttributesOnly<UserRegistrationModel>>> {
    state: UserRegistrationState;
    registrationReason: string;
    moderationResponse: string;
    password: string;
    username: string;
    email: string;
    emailVerified: boolean;
    accountDisplayName: string;
    channelHandle: string;
    channelDisplayName: string;
    createdAt: Date;
    updatedAt: Date;
    userId: number;
    User: UserModel;
    static cryptPasswordIfNeeded(instance: UserRegistrationModel): Promise<void>;
    static load(id: number): Promise<MRegistration>;
    static loadByEmail(email: string): Promise<MRegistration>;
    static loadByEmailOrUsername(emailOrUsername: string): Promise<MRegistration>;
    static loadByEmailOrHandle(options: {
        email: string;
        username: string;
        channelHandle?: string;
    }): Promise<MRegistration>;
    static listForApi(options: {
        start: number;
        count: number;
        sort: string;
        search?: string;
    }): Promise<{
        total: number;
        data: MRegistrationFormattable[];
    }>;
    toFormattedJSON(this: MRegistrationFormattable): UserRegistration;
}
//# sourceMappingURL=user-registration.d.ts.map