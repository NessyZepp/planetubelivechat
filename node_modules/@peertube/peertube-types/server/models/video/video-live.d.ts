import { Transaction } from 'sequelize';
import { Model } from 'sequelize-typescript';
import { MVideoLive, MVideoLiveVideoWithSetting } from '../../types/models';
import { LiveVideo, LiveVideoLatencyMode } from '../../../shared/models';
import { AttributesOnly } from '../../../shared/typescript-utils';
import { VideoModel } from './video';
import { VideoLiveReplaySettingModel } from './video-live-replay-setting';
export declare class VideoLiveModel extends Model<Partial<AttributesOnly<VideoLiveModel>>> {
    streamKey: string;
    saveReplay: boolean;
    permanentLive: boolean;
    latencyMode: LiveVideoLatencyMode;
    createdAt: Date;
    updatedAt: Date;
    videoId: number;
    Video: VideoModel;
    replaySettingId: number;
    ReplaySetting: VideoLiveReplaySettingModel;
    static deleteReplaySetting(instance: VideoLiveModel, options: {
        transaction: Transaction;
    }): Promise<number>;
    static loadByStreamKey(streamKey: string): Promise<MVideoLiveVideoWithSetting>;
    static loadByVideoId(videoId: number): Promise<MVideoLive>;
    toFormattedJSON(canSeePrivateInformation: boolean): LiveVideo;
}
//# sourceMappingURL=video-live.d.ts.map