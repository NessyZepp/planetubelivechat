import { Model as SequelizeModel, Sequelize } from 'sequelize';
/**
 *
 * Build Sequelize models from sequelize raw query (that must use { nest: true } options)
 *
 * In order to sequelize to correctly build the JSON this class will ingest,
 * the columns selected in the raw query should be in the following form:
 *   * All tables must be Pascal Cased (for example "VideoChannel")
 *   * Root table must end with `Model` (for example "VideoCommentModel")
 *   * Joined tables must contain the origin table name + '->JoinedTable'. For example:
 *     * "Actor" is joined to "Account": "Actor" table must be renamed "Account->Actor"
 *     * "Account->Actor" is joined to "Server": "Server" table must be renamed to "Account->Actor->Server"
 *   * Selected columns must be renamed to contain the JSON path:
 *     * "videoComment"."id": "VideoCommentModel"."id"
 *     * "Account"."Actor"."Server"."id": "Account.Actor.Server.id"
 *   * All tables must contain the row id
 */
export declare class ModelBuilder<T extends SequelizeModel> {
    private readonly sequelize;
    private readonly modelRegistry;
    constructor(sequelize: Sequelize);
    createModels(jsonArray: any[], baseModelName: string): T[];
    private createModel;
    private createOrFindModel;
    private findModelBuilder;
    private buildSequelizeModelName;
    private getModelRegistryKey;
}
//# sourceMappingURL=model-builder.d.ts.map